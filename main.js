export * as groth16 from "./src/groth16.js";
export * as powersOfTau from "./src/powersoftau.js";
export * as r1cs from "./src/r1cs.js";
export * as wtns from "./src/wtns.js";
export * as zKey from "./src/zkey.js";
export * as plonk from "./src/plonk.js";
import { buildPoseidon } from "circomlibjs";

async function poseidonHash(arr) {
	let poseidon = await buildPoseidon();

	let poseidonInputCount = 16;
	let fieldSize = 32;

	let noOfInputs = arr.byteLength / fieldSize;
	if (noOfInputs * fieldSize != arr.byteLength)
		throw new Error("transcript contains non-native field element");

	let output;
	for (let i = 0; i < noOfInputs; i++) {
		let inputArr = new Uint8Array(poseidonInputCount * fieldSize);
		inputArr.set(
			arr.slice(
				poseidonInputCount * fieldSize * i,
				poseidonInputCount * fieldSize * (i + 1)
			),
			0
		);
		output = poseidon(inputArr, output, 1);
	}

	return output;
}

let trial = [
	[
		0, 21, 21, 52, 234, 118, 140, 222, 228, 214, 119, 200, 247, 115, 229,
		95, 19, 18, 157, 153, 198, 39, 82, 45, 170, 203, 45, 215, 125, 111, 15,
		26,
	],
	[
		18, 16, 244, 171, 98, 186, 123, 73, 57, 0, 11, 229, 157, 57, 247, 80,
		202, 135, 113, 70, 134, 211, 74, 152, 62, 169, 129, 17, 98, 179, 107,
		13,
	],
	[
		123, 246, 21, 74, 46, 138, 106, 152, 200, 32, 28, 65, 56, 177, 154, 216,
		76, 188, 207, 251, 18, 176, 39, 252, 133, 79, 249, 103, 237, 239, 146,
		1,
	],
	[
		165, 91, 72, 177, 131, 16, 141, 171, 113, 198, 122, 130, 16, 117, 218,
		239, 41, 214, 219, 88, 0, 199, 174, 218, 88, 93, 106, 31, 149, 56, 38,
		12,
	],
	[
		147, 35, 236, 55, 181, 10, 120, 73, 33, 216, 216, 93, 124, 62, 3, 246,
		184, 140, 200, 25, 185, 209, 175, 54, 69, 246, 5, 79, 38, 199, 235, 2,
	],
	[
		242, 35, 9, 133, 206, 99, 153, 30, 151, 88, 23, 241, 224, 107, 98, 221,
		204, 105, 75, 37, 97, 34, 19, 24, 154, 247, 44, 250, 114, 145, 220, 11,
	],
	[
		159, 94, 222, 114, 236, 145, 154, 217, 122, 232, 184, 142, 10, 235, 243,
		142, 53, 77, 242, 139, 146, 255, 241, 197, 242, 36, 134, 243, 32, 228,
		57, 24,
	],
	[
		5, 253, 128, 13, 33, 211, 102, 253, 51, 54, 185, 36, 40, 56, 107, 50,
		219, 35, 22, 136, 105, 60, 211, 82, 26, 158, 70, 199, 59, 166, 87, 30,
	],
	[
		58, 199, 195, 211, 10, 11, 122, 79, 179, 76, 52, 178, 2, 200, 165, 148,
		20, 5, 134, 18, 115, 20, 128, 175, 49, 184, 216, 19, 234, 225, 93, 5,
	],
	[
		209, 227, 176, 23, 36, 79, 202, 36, 129, 98, 93, 51, 177, 44, 123, 12,
		118, 26, 239, 108, 24, 206, 221, 73, 34, 139, 41, 47, 107, 45, 71, 44,
	],
	[
		138, 245, 177, 123, 24, 11, 20, 226, 157, 240, 44, 16, 29, 208, 225, 62,
		68, 159, 35, 38, 253, 253, 24, 29, 177, 149, 72, 250, 188, 181, 181, 26,
	],
	[
		43, 136, 106, 28, 80, 72, 101, 133, 105, 38, 81, 142, 131, 24, 238, 249,
		68, 204, 15, 251, 104, 180, 118, 240, 91, 30, 69, 40, 57, 63, 85, 18,
	],
	[
		125, 158, 53, 154, 200, 194, 101, 147, 192, 173, 127, 112, 83, 4, 84,
		177, 170, 12, 210, 247, 163, 28, 192, 154, 111, 190, 239, 19, 10, 28,
		222, 8,
	],
	[
		234, 45, 249, 91, 153, 201, 71, 124, 54, 110, 177, 178, 137, 49, 231,
		147, 134, 202, 107, 197, 199, 21, 242, 243, 17, 153, 104, 174, 176, 184,
		94, 27,
	],
	[
		36, 229, 238, 147, 105, 65, 32, 229, 96, 216, 140, 122, 120, 103, 59,
		134, 225, 69, 249, 124, 53, 238, 245, 83, 216, 146, 103, 234, 219, 126,
		180, 0,
	],
	[
		68, 141, 232, 231, 19, 228, 94, 39, 100, 79, 4, 135, 108, 14, 35, 69,
		81, 53, 75, 14, 77, 181, 57, 52, 132, 160, 67, 56, 241, 250, 206, 11,
	],
];

async function main() {
	let input = [];
	trial.forEach((t) => {
		input = input.concat(t);
	});
	input = new Uint8Array(input);

	let poseidon = await buildPoseidon();
	let hash = poseidon(input, undefined, 4);
	console.log(hash);
}

main()
	.then(() => {
		console.log("Works!");
	})
	.catch((e) => {
		console.log(`Errored with ${e}`);
	});
